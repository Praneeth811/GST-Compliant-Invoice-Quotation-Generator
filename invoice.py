# -*- coding: utf-8 -*-
"""invvv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aK4Jnr5EOEBAVrh5d9z3rTyWPFMI4_11
"""

!pip install fpdf

from fpdf import FPDF
import pandas as pd
from datetime import datetime, timedelta
from google.colab import files
from IPython.display import display
import ipywidgets as widgets
import os

# === Step 1: Upload Logo ===
print("üñºÔ∏è Upload your logo (PNG):")
logo_upload = files.upload()
logo_file = next((f for f in logo_upload if f.endswith(".png")), None)
if not logo_file:
    raise FileNotFoundError("No PNG logo file uploaded.")

# === Step 2: Dropdown to select document type ===
from IPython.display import display, clear_output

# Create widgets
doc_type_dropdown = widgets.Dropdown(
    options=["INVOICE", "QUOTATION", "BILL"],
    value="INVOICE",
    description="Select Document Type:",
    style={'description_width': 'initial'}
)
confirm_button = widgets.Button(description="Confirm Selection", button_style="success")
output_box = widgets.Output()

# Define capture function
def on_confirm_clicked(b):
    global document_type
    document_type = doc_type_dropdown.value.strip().upper()
    with output_box:
        clear_output()
        print(f"‚úÖ You selected: {document_type}")

confirm_button.on_click(on_confirm_clicked)

# Display widgets
display(doc_type_dropdown, confirm_button, output_box)



# === Step 3: Generate Invoice Number ===
def generate_invoice_number():
    today_str = datetime.today().strftime("%Y%m%d")
    counter_file = "invoice_counter.txt"
    if os.path.exists(counter_file):
        with open(counter_file, "r") as f:
            last_date, last_count = f.read().strip().split("-")
        count = int(last_count) + 1 if last_date == today_str else 1
    else:
        count = 1
    with open(counter_file, "w") as f:
        f.write(f"{today_str}-{count:03d}")
    return f"INV-{today_str}-{count:03d}"

invoice_no = generate_invoice_number()
today = datetime.today().strftime("%d-%b-%Y")
due = (datetime.today() + timedelta(days=15)).strftime("%d-%b-%Y")

# === Step 4: Business Inputs ===
supplier_gstin = input("Enter your GSTIN number: ")
recipient = input("Recipient Name: ")
recipient_addr = input("Recipient Address: ")
recipient_gstin = input("Recipient GSTIN (optional): ")

state_code_mapping = {
    "Andhra Pradesh": "37", "Arunachal Pradesh": "12", "Assam": "18", "Bihar": "10",
    "Chhattisgarh": "22", "Delhi": "07", "Goa": "30", "Gujarat": "24", "Haryana": "06",
    "Himachal Pradesh": "02", "Jammu and Kashmir": "01", "Jharkhand": "20", "Karnataka": "29",
    "Kerala": "32", "Madhya Pradesh": "23", "Maharashtra": "27", "Manipur": "14",
    "Meghalaya": "17", "Mizoram": "15", "Nagaland": "13", "Odisha": "21", "Punjab": "03",
    "Rajasthan": "08", "Sikkim": "11", "Tamil Nadu": "33", "Telangana": "36",
    "Tripura": "16", "Uttar Pradesh": "09", "Uttarakhand": "05", "West Bengal": "19",
    "Puducherry": "34", "Chandigarh": "04", "Dadra and Nagar Haveli and Daman and Diu": "26",
    "Ladakh": "38", "Lakshadweep": "31", "Andaman and Nicobar Islands": "35"
}

place_supply = input("Place of Supply (e.g., Tamil Nadu): ").strip()
state_code = state_code_mapping.get(place_supply, "NA")

bank_details = input("Bank Details (optional): ")
notes = input("Declaration or Notes (optional): ")

# Auto-fill billing/shipping
billing_addr = shipping_addr = recipient_addr

# === Step 5: Item Table Input ===
print("\nüì¶ Enter item table columns (e.g., S.No, Description, HSN, Qty, Rate, Amount):")
columns = [c.strip() for c in input().split(",") if c.strip()]
rows = int(input("How many item rows to enter? "))
data = []
for i in range(rows):
    print(f"\nRow {i+1}")
    row = [input(f"  {col}: ") for col in columns]
    data.append(row)
df = pd.DataFrame(data, columns=columns)

# === Step 6: Total Amount ===
if "Amount" in df.columns:
    df["Amount"] = pd.to_numeric(df["Amount"], errors="coerce").fillna(0)
    total_amount = df["Amount"].sum()
else:
    total_amount = 0

# === Step 7: PDF Template ===

class InvoicePDF(FPDF):
    def header(self):
        self.image(logo_file, x=10, y=10, w=20)
        self.set_xy(28, 12)
        self.set_font("Helvetica", "B", 18)
        self.set_text_color(0, 102, 204)
        self.cell(100, 8, "ROIxport", ln=True)
        self.set_xy(28, 20)
        self.set_font("Helvetica", "I", 9)
        self.set_text_color(50, 50, 50)
        self.cell(100, 6, "Your gateway to successful international trade partnerships", ln=True)

        self.set_xy(140, 12)
        self.set_font("Arial", "B", 16)
        self.set_text_color(0, 0, 0)
        self.cell(60, 8, document_type, ln=True, align="R")
        self.set_font("Arial", "", 10)
        self.set_x(140)
        self.cell(60, 6, f"Invoice #: {invoice_no}", ln=True, align="R")
        self.set_x(140)
        self.cell(60, 6, f"Date: {today}", ln=True, align="R")
        self.set_x(140)
        self.cell(60, 6, f"Due Date: {due}", ln=True, align="R")
        self.ln(10)

    def from_section(self):
        self.set_font("Arial", "B", 10)
        self.cell(0, 6, "From:", ln=True)
        self.set_font("Arial", "", 10)
        self.multi_cell(0, 5,
            "ROIxport Solutions Pvt Ltd\n"
            "47, Vaidyanathan Street, Harrington Rd, Shenoy Nagar, Chetpet, Chennai\n"
            f"GSTIN: {supplier_gstin}\n"
            "Email/Phone: billing@roixport.com / +91-9999988888"
        )
        self.ln(2)

    def bill_to_section(self):
        self.set_font("Arial", "B", 10)
        self.cell(0, 6, "Bill To:", ln=True)
        self.set_font("Arial", "", 10)
        self.multi_cell(0, 5, f"{recipient}\n{recipient_addr}\nGSTIN: {recipient_gstin or 'N/A'}")
        self.ln(2)
        self.cell(0, 6, f"Billing Address: {billing_addr}", ln=True)
        self.cell(0, 6, f"Shipping Address: {shipping_addr}", ln=True)
        self.cell(0, 6, f"Place of Supply: {place_supply} ({state_code})", ln=True)
        self.ln(3)

    def item_table(self, df):
        self.set_font("Arial", "B", 10)
        col_width = 190 // len(df.columns)
        for col in df.columns:
            self.cell(col_width, 8, col, border=1, align="C")
        self.ln()
        self.set_font("Arial", "", 10)
        for _, row in df.iterrows():
            for item in row:
                self.cell(col_width, 8, str(item), border=1, align="C")
            self.ln()

    def total_section(self):
        self.ln(5)
        self.set_font("Arial", "B", 10)
        self.cell(150, 8, "Total Invoice Value (after tax)", border=1)
        self.cell(40, 8, f"{total_amount:,.2f}", border=1, align="R")
        self.ln(8)

    def terms_signature(self):
        self.set_font("Arial", "", 9)
        if notes:
            self.multi_cell(0, 6, f"Declaration:\n{notes}")
        if bank_details:
            self.ln(2)
            self.multi_cell(0, 6, f"Bank Details:\n{bank_details}")
        self.ln(10)
        self.set_font("Arial", "I", 10)
        self.cell(0, 6, "Signature of Supplier / Authorized", ln=True, align="R")

# === Step 8: Generate & Download ===
pdf = InvoicePDF()
pdf.add_page()
pdf.from_section()
pdf.bill_to_section()
pdf.item_table(df)
pdf.total_section()
pdf.terms_signature()

filename = f"invoice_{invoice_no}.pdf"
pdf.output(filename)
print(f"‚úÖ {document_type} generated: {filename}")
files.download(filename)

